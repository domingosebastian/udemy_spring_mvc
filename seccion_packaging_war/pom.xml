<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.formacion</groupId>
	<artifactId>plantilla_packaging_basico</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging> <!-- El packaging ha canviado de jar a war -->

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.1</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>17</java.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

        <!-- 
         Incluyendo solo la entrada anterior (spring-boot-starter-web), las librerias del tomcat estaban disponibles
         tanto en la compilacion como en el jar final. 
         Si vamos a desplegar en un contendor web, estas librerias no deben estar en la aplicacion por lo que 
         cambiamos el scope por defecto (compile) por el provided.
         -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
	    <!-- Con final name controlamos el nombre del war creado. Ya que el contexto de la aplicacion se basa (por defecto)
	         en el nombre del fichero, es conveniente que este sea mas manejable
	     -->
	    <finalName>app</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>


</project>